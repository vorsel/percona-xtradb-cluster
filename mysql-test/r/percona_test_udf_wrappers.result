***
*** creating test UDF functions
***
CREATE FUNCTION wrapped_udf_string RETURNS STRING SONAME 'TEST_UDF_WRAPPERS_LIB';
CREATE FUNCTION wrapped_udf_real RETURNS REAL SONAME 'TEST_UDF_WRAPPERS_LIB';
***
*** checking 'wrapped_udf_string()'
***

* regardless of the exception thrown from the 'wrapped_udf_string_impl' class constructor
* it will always be translated into 'ER_CANT_INITIALIZE_UDF' client error code
SELECT wrapped_udf_string() AS result;
ERROR HY000: Can't initialize function 'wrapped_udf_string'; function requires exactly one argument
SELECT wrapped_udf_string('', '') AS result;
ERROR HY000: Can't initialize function 'wrapped_udf_string'; test udf_exception with sentinel
SELECT wrapped_udf_string('', '', '') AS result;
ERROR HY000: Can't initialize function 'wrapped_udf_string'; test udf_exception without sentinel
SELECT wrapped_udf_string('', '', '', '') AS result;
ERROR HY000: Can't initialize function 'wrapped_udf_string'; unexpected exception

* for NULL parameter NULL is expected to be returned
* string parameters are expected to be wrapped into '[' and ']'
* integer and real values are expected to be converted to strings and then wrapped into '[' and ']'
SELECT wrapped_udf_string(NULL) AS result;
result
NULL
SELECT wrapped_udf_string('') AS result;
result
[]
SELECT wrapped_udf_string(' ') AS result;
result
[ ]
SELECT wrapped_udf_string('abc') AS result;
result
[abc]
SELECT wrapped_udf_string('42') AS result;
result
[42]
SELECT wrapped_udf_string('0.5') AS result;
result
[0.5]
SELECT wrapped_udf_string(42) AS result;
result
[42]
SELECT wrapped_udf_string(0.5) AS result;
result
[0.5]
***
*** checking 'wrapped_udf_real()'
***

* regardless of the exception thrown from the 'wrapped_udf_real_impl' class constructor
* it will always be translated into 'ER_CANT_INITIALIZE_UDF' client error code
SELECT wrapped_udf_real() AS result;
ERROR HY000: Can't initialize function 'wrapped_udf_real'; function requires exactly one argument
SELECT wrapped_udf_real('', '') AS result;
ERROR HY000: Can't initialize function 'wrapped_udf_real'; function requires exactly one argument
SELECT wrapped_udf_real('', '', '') AS result;
ERROR HY000: Can't initialize function 'wrapped_udf_real'; function requires exactly one argument
SELECT wrapped_udf_real('', '', '', '') AS result;
ERROR HY000: Can't initialize function 'wrapped_udf_real'; function requires exactly one argument

* for NULL parameter NULL is expected to be returned
* real parameters are expected to be incremented by 0.25
* integer parameters are expected to be converted to real and incremented by 0.25
* strings containing proper integer/real values are expected to be converted to real and incremented by 0.25
* strings containing invalid numeric values are expected to be converted to 0.0 and incremented by 0.25
SELECT wrapped_udf_real(NULL) AS result;
result
NULL
SELECT wrapped_udf_real('') AS result;
result
0.25
SELECT wrapped_udf_real(' ') AS result;
result
0.25
SELECT wrapped_udf_real('abc') AS result;
result
0.25
Warnings:
Warning	1292	Truncated incorrect DOUBLE value: 'abc'
SELECT wrapped_udf_real('42') AS result;
result
42.25
SELECT wrapped_udf_real('0.5') AS result;
result
0.75
SELECT wrapped_udf_real(42) AS result;
result
42.25
SELECT wrapped_udf_real(0.5) AS result;
result
0.75
***
*** checking error codes / messages generated by throwing exceptions
***

* calling with special value '100' calls "my_error(ER_DA_OOM, MYF(0));" and throws
* 'mysqlpp::udf_exception' with sentinel
* Wrappers are expected not to overwrite error code set previously ('ER_DA_OOM')
SELECT wrapped_udf_string('100') AS result;
ERROR HY000: Out of memory
SELECT wrapped_udf_real(100.0) AS result;
ERROR HY000: Out of memory

* calling with special value '101' throws 'mysqlpp::udf_exception' with custom MySQL client
* error code ER_WRAPPED_UDF_EXCEPTION
SELECT wrapped_udf_string('101') AS result;
ERROR HY000: Wrapped UDF exception in function '<function_name>'; test udf_exception without sentinel
SELECT wrapped_udf_real(101.0) AS result;
ERROR HY000: Wrapped UDF exception in function '<function_name>'; test udf_exception without sentinel

* calling with special value '102' throws 'std::runtime_error' (an exception derived from 'std::exception')
* and we expect 'ER_UDF_ERROR' with custom error message to be returned
SELECT wrapped_udf_string('102') AS result;
ERROR HY000: <function_name> UDF failed; test runtime_error
SELECT wrapped_udf_real(102.0) AS result;
ERROR HY000: <function_name> UDF failed; test runtime_error

* calling with special value '103' throws a constant '42' (a instance of a type that is not derived from 'std::exception')
* and we expect 'ER_UDF_ERROR' with generic error message to be returned
SELECT wrapped_udf_string('103') AS result;
ERROR HY000: <function_name> UDF failed; unexpected exception
SELECT wrapped_udf_real(103.0) AS result;
ERROR HY000: <function_name> UDF failed; unexpected exception
***
*** dropping test UDF functions
***
DROP FUNCTION wrapped_udf_real;
DROP FUNCTION wrapped_udf_string;
